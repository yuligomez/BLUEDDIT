// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Server_GPRC_MQ {
  public static partial class Greeter
  {
    static readonly string __ServiceName = "greet.Greeter";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Server_GPRC_MQ.HelloRequest> __Marshaller_greet_HelloRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.HelloRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.HelloReply> __Marshaller_greet_HelloReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.HelloReply.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.AddThemeRequest> __Marshaller_greet_AddThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.AddThemeRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.CommonReply> __Marshaller_greet_CommonReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.CommonReply.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.ModifyThemeRequest> __Marshaller_greet_ModifyThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.ModifyThemeRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.DeleteThemeRequest> __Marshaller_greet_DeleteThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.DeleteThemeRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.AddPostRequest> __Marshaller_greet_AddPostRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.AddPostRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.ModifyPostRequest> __Marshaller_greet_ModifyPostRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.ModifyPostRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.DeletePostRequest> __Marshaller_greet_DeletePostRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.DeletePostRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.AssociatePostToThemeRequest> __Marshaller_greet_AssociatePostToThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.AssociatePostToThemeRequest.Parser));
    static readonly grpc::Marshaller<global::Server_GPRC_MQ.DessassociatePostToThemeRequest> __Marshaller_greet_DessassociatePostToThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server_GPRC_MQ.DessassociatePostToThemeRequest.Parser));

    static readonly grpc::Method<global::Server_GPRC_MQ.HelloRequest, global::Server_GPRC_MQ.HelloReply> __Method_SayHello = new grpc::Method<global::Server_GPRC_MQ.HelloRequest, global::Server_GPRC_MQ.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_greet_HelloRequest,
        __Marshaller_greet_HelloReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.AddThemeRequest, global::Server_GPRC_MQ.CommonReply> __Method_AddTheme = new grpc::Method<global::Server_GPRC_MQ.AddThemeRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTheme",
        __Marshaller_greet_AddThemeRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.ModifyThemeRequest, global::Server_GPRC_MQ.CommonReply> __Method_ModifyTheme = new grpc::Method<global::Server_GPRC_MQ.ModifyThemeRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyTheme",
        __Marshaller_greet_ModifyThemeRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.DeleteThemeRequest, global::Server_GPRC_MQ.CommonReply> __Method_DeleteTheme = new grpc::Method<global::Server_GPRC_MQ.DeleteThemeRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTheme",
        __Marshaller_greet_DeleteThemeRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.AddPostRequest, global::Server_GPRC_MQ.CommonReply> __Method_AddPost = new grpc::Method<global::Server_GPRC_MQ.AddPostRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPost",
        __Marshaller_greet_AddPostRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.ModifyPostRequest, global::Server_GPRC_MQ.CommonReply> __Method_ModifyPost = new grpc::Method<global::Server_GPRC_MQ.ModifyPostRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPost",
        __Marshaller_greet_ModifyPostRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.DeletePostRequest, global::Server_GPRC_MQ.CommonReply> __Method_DeletePost = new grpc::Method<global::Server_GPRC_MQ.DeletePostRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePost",
        __Marshaller_greet_DeletePostRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.AssociatePostToThemeRequest, global::Server_GPRC_MQ.CommonReply> __Method_AssociatePostToTheme = new grpc::Method<global::Server_GPRC_MQ.AssociatePostToThemeRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AssociatePostToTheme",
        __Marshaller_greet_AssociatePostToThemeRequest,
        __Marshaller_greet_CommonReply);

    static readonly grpc::Method<global::Server_GPRC_MQ.DessassociatePostToThemeRequest, global::Server_GPRC_MQ.CommonReply> __Method_DessassociatePostToTheme = new grpc::Method<global::Server_GPRC_MQ.DessassociatePostToThemeRequest, global::Server_GPRC_MQ.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DessassociatePostToTheme",
        __Marshaller_greet_DessassociatePostToThemeRequest,
        __Marshaller_greet_CommonReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Server_GPRC_MQ.GreetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    [grpc::BindServiceMethod(typeof(Greeter), "BindService")]
    public abstract partial class GreeterBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.HelloReply> SayHello(global::Server_GPRC_MQ.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> AddTheme(global::Server_GPRC_MQ.AddThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> ModifyTheme(global::Server_GPRC_MQ.ModifyThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> DeleteTheme(global::Server_GPRC_MQ.DeleteThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> AddPost(global::Server_GPRC_MQ.AddPostRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> ModifyPost(global::Server_GPRC_MQ.ModifyPostRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> DeletePost(global::Server_GPRC_MQ.DeletePostRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> AssociatePostToTheme(global::Server_GPRC_MQ.AssociatePostToThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Server_GPRC_MQ.CommonReply> DessassociatePostToTheme(global::Server_GPRC_MQ.DessassociatePostToThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_AddTheme, serviceImpl.AddTheme)
          .AddMethod(__Method_ModifyTheme, serviceImpl.ModifyTheme)
          .AddMethod(__Method_DeleteTheme, serviceImpl.DeleteTheme)
          .AddMethod(__Method_AddPost, serviceImpl.AddPost)
          .AddMethod(__Method_ModifyPost, serviceImpl.ModifyPost)
          .AddMethod(__Method_DeletePost, serviceImpl.DeletePost)
          .AddMethod(__Method_AssociatePostToTheme, serviceImpl.AssociatePostToTheme)
          .AddMethod(__Method_DessassociatePostToTheme, serviceImpl.DessassociatePostToTheme).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.HelloRequest, global::Server_GPRC_MQ.HelloReply>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_AddTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.AddThemeRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.AddTheme));
      serviceBinder.AddMethod(__Method_ModifyTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.ModifyThemeRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.ModifyTheme));
      serviceBinder.AddMethod(__Method_DeleteTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.DeleteThemeRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.DeleteTheme));
      serviceBinder.AddMethod(__Method_AddPost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.AddPostRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.AddPost));
      serviceBinder.AddMethod(__Method_ModifyPost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.ModifyPostRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.ModifyPost));
      serviceBinder.AddMethod(__Method_DeletePost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.DeletePostRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.DeletePost));
      serviceBinder.AddMethod(__Method_AssociatePostToTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.AssociatePostToThemeRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.AssociatePostToTheme));
      serviceBinder.AddMethod(__Method_DessassociatePostToTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Server_GPRC_MQ.DessassociatePostToThemeRequest, global::Server_GPRC_MQ.CommonReply>(serviceImpl.DessassociatePostToTheme));
    }

  }
}
#endregion
